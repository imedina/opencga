package org.opencb.opencga.app.cli.main.executors;

import org.opencb.opencga.app.cli.main.executors.OpencgaCommandExecutor;
import org.opencb.opencga.app.cli.main.*;
import org.opencb.opencga.core.response.RestResponse;
import org.opencb.opencga.client.exceptions.ClientException;
import org.opencb.commons.datastore.core.ObjectMap;

import org.opencb.opencga.catalog.exceptions.CatalogAuthenticationException;
import org.opencb.opencga.core.common.JacksonUtils;

import java.util.List;
import org.opencb.opencga.core.response.QueryType;
import org.opencb.commons.utils.PrintUtils;

import org.opencb.opencga.app.cli.main.options.AnalysisVariantCommandOptions;

import org.opencb.opencga.core.models.variant.SampleEligibilityAnalysisParams;
import org.opencb.commons.datastore.core.FacetField;
import org.opencb.opencga.core.models.variant.CircosAnalysisParams;
import org.opencb.opencga.core.models.variant.VariantExportParams;
import org.opencb.biodata.models.variant.metadata.SampleVariantStats;
import org.opencb.opencga.core.models.variant.SampleVariantFilterParams;
import org.opencb.biodata.models.variant.metadata.Aggregation;
import org.opencb.biodata.models.variant.metadata.VariantMetadata;
import org.opencb.opencga.core.models.variant.IndividualQcAnalysisParams;
import org.opencb.commons.datastore.core.QueryResponse;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByIndividual;
import org.opencb.biodata.models.variant.avro.VariantAnnotation;
import org.opencb.biodata.models.variant.Variant;
import org.opencb.opencga.core.models.variant.PlinkWrapperParams;
import org.opencb.opencga.core.models.variant.MendelianErrorAnalysisParams;
import org.opencb.oskar.analysis.variant.gwas.GwasConfiguration;
import org.opencb.opencga.core.models.variant.MutationalSignatureAnalysisParams;
import org.opencb.opencga.core.models.variant.CohortVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.job.Job;
import org.opencb.biodata.models.clinical.qc.Signature;
import org.opencb.opencga.core.models.variant.RelatednessAnalysisParams;
import org.opencb.commons.datastore.core.ObjectMap;
import org.opencb.opencga.core.models.variant.FamilyQcAnalysisParams;
import org.opencb.opencga.core.models.variant.SampleVariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.GwasAnalysisParams;
import org.opencb.opencga.core.models.variant.KnockoutAnalysisParams;
import java.util.Map;
import org.opencb.biodata.models.clinical.ClinicalProperty.ModeOfInheritance;
import org.opencb.opencga.core.models.operations.variant.VariantStatsExportParams;
import org.opencb.opencga.core.models.variant.VariantIndexParams;
import org.opencb.biodata.models.clinical.ClinicalProperty.Penetrance;
import org.opencb.biodata.models.variant.metadata.VariantSetStats;
import org.opencb.opencga.core.models.variant.GatkWrapperParams;
import org.opencb.opencga.core.models.analysis.knockout.KnockoutByGene;
import org.opencb.opencga.core.models.variant.AnnotationVariantQueryParams;
import org.opencb.opencga.core.models.variant.SampleQcAnalysisParams;
import org.opencb.opencga.core.models.variant.RvtestsWrapperParams;
import org.opencb.opencga.core.models.variant.VariantStatsAnalysisParams;
import org.opencb.opencga.core.models.variant.GenomePlotAnalysisParams;
import org.opencb.opencga.core.models.variant.InferredSexAnalysisParams;


/*
* WARNING: AUTOGENERATED CODE
*
* This code was generated by a tool.
* Autogenerated on: 2022-05-04
*
* Manual changes to this file may cause unexpected behavior in your application.
* Manual changes to this file will be overwritten if the code is regenerated.
*/


/**
 * This class contains methods for the Analysis - Variant command line.
 *    OpenCGA version: 2.3.0-SNAPSHOT
 *    PATH: /{apiVersion}/analysis/variant
 */
public class AnalysisVariantCommandExecutor extends OpencgaCommandExecutor {

    private AnalysisVariantCommandOptions analysisVariantCommandOptions;

    public AnalysisVariantCommandExecutor(AnalysisVariantCommandOptions analysisVariantCommandOptions) throws CatalogAuthenticationException {
        super(analysisVariantCommandOptions.commonCommandOptions);
        this.analysisVariantCommandOptions = analysisVariantCommandOptions;
    }

    @Override
    public void execute() throws Exception {

        logger.debug("Executing Analysis - Variant command line");

        String subCommandString = getParsedSubCommand(analysisVariantCommandOptions.jCommander);

        RestResponse queryResponse = null;

        switch (subCommandString) {
            case "aggregationstats":
                queryResponse = aggregationStats();
                break;
            case "annotation-metadata":
                queryResponse = metadataAnnotation();
                break;
            case "annotation-query":
                queryResponse = queryAnnotation();
                break;
            case "circos-run":
                queryResponse = runCircos();
                break;
            case "cohort-stats-delete":
                queryResponse = deleteCohortStats();
                break;
            case "cohort-stats-info":
                queryResponse = infoCohortStats();
                break;
            case "cohort-stats-run":
                queryResponse = runCohortStats();
                break;
            case "export-run":
                queryResponse = runExport();
                break;
            case "family-genotypes":
                queryResponse = genotypesFamily();
                break;
            case "family-qc-run":
                queryResponse = runFamilyQc();
                break;
            case "file-delete":
                queryResponse = deleteFile();
                break;
            case "gatk-run":
                queryResponse = runGatk();
                break;
            case "genome-plot-run":
                queryResponse = runGenomePlot();
                break;
            case "gwas-run":
                queryResponse = runGwas();
                break;
            case "index-run":
                queryResponse = runIndex();
                break;
            case "individual-qc-run":
                queryResponse = runIndividualQc();
                break;
            case "inferred-sex-run":
                queryResponse = runInferredSex();
                break;
            case "knockout-gene-query":
                queryResponse = queryKnockoutGene();
                break;
            case "knockout-individual-query":
                queryResponse = queryKnockoutIndividual();
                break;
            case "knockout-run":
                queryResponse = runKnockout();
                break;
            case "mendelian-error-run":
                queryResponse = runMendelianError();
                break;
            case "metadata":
                queryResponse = metadata();
                break;
            case "mutational-signature-query":
                queryResponse = queryMutationalSignature();
                break;
            case "mutational-signature-run":
                queryResponse = runMutationalSignature();
                break;
            case "plink-run":
                queryResponse = runPlink();
                break;
            case "query":
                queryResponse = query();
                break;
            case "relatedness-run":
                queryResponse = runRelatedness();
                break;
            case "rvtests-run":
                queryResponse = runRvtests();
                break;
            case "sample-aggregation-stats":
                queryResponse = aggregationStatsSample();
                break;
            case "sample-eligibility-run":
                queryResponse = runSampleEligibility();
                break;
            case "sample-qc-run":
                queryResponse = runSampleQc();
                break;
            case "sample-query":
                queryResponse = querySample();
                break;
            case "sample-run":
                queryResponse = runSample();
                break;
            case "sample-stats-query":
                queryResponse = querySampleStats();
                break;
            case "sample-stats-run":
                queryResponse = runSampleStats();
                break;
            case "stats-export-run":
                queryResponse = runStatsExport();
                break;
            case "stats-run":
                queryResponse = runStats();
                break;
            default:
                logger.error("Subcommand not valid");
                break;
        }

        createOutput(queryResponse);

    }

    private RestResponse<QueryResponse> aggregationStats() throws Exception {

        logger.debug("Executing aggregationStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStats(queryParams);
    }

    private RestResponse<ObjectMap> metadataAnnotation() throws Exception {

        logger.debug("Executing metadataAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.metadataAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);
        queryParams.putIfNotEmpty("project", commandOptions.project);

        return openCGAClient.getVariantClient().metadataAnnotation(queryParams);
    }

    private RestResponse<VariantAnnotation> queryAnnotation() throws Exception {

        logger.debug("Executing queryAnnotation in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryAnnotationCommandOptions commandOptions = analysisVariantCommandOptions.queryAnnotationCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("annotationId", commandOptions.annotationId);

        return openCGAClient.getVariantClient().queryAnnotation(queryParams);
    }

    private RestResponse<String> runCircos() throws Exception {

        logger.debug("Executing runCircos in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCircosCommandOptions commandOptions = analysisVariantCommandOptions.runCircosCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CircosAnalysisParams circosAnalysisParams = new CircosAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<String> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(circosAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            circosAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CircosAnalysisParams.class);
        }  else {
        ((CircosAnalysisParams)circosAnalysisParams)
            .setTitle(commandOptions.title)
            .setDensity(commandOptions.density)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runCircos(circosAnalysisParams, queryParams);
    }

    private RestResponse<SampleVariantStats> deleteCohortStats() throws Exception {

        logger.debug("Executing deleteCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.deleteCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteCohortStats(queryParams);
    }

    private RestResponse<VariantSetStats> infoCohortStats() throws Exception {

        logger.debug("Executing infoCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.InfoCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.infoCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().infoCohortStats(commandOptions.cohort, queryParams);
    }

    private RestResponse<Job> runCohortStats() throws Exception {

        logger.debug("Executing runCohortStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunCohortStatsCommandOptions commandOptions = analysisVariantCommandOptions.runCohortStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        CohortVariantStatsAnalysisParams cohortVariantStatsAnalysisParams = new CohortVariantStatsAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(cohortVariantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            cohortVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), CohortVariantStatsAnalysisParams.class);
        }  else {
        ((CohortVariantStatsAnalysisParams)cohortVariantStatsAnalysisParams)
            .setCohort(commandOptions.cohort)
            .setSamples(splitWithTrim(commandOptions.samples))
            .setSampleAnnotation(commandOptions.sampleAnnotation)
            .setOutdir(commandOptions.outdir);

            if (commandOptions.index != null){
                ((CohortVariantStatsAnalysisParams)cohortVariantStatsAnalysisParams).setIndex(commandOptions.index);
             }

        }
        return openCGAClient.getVariantClient().runCohortStats(cohortVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runExport() throws Exception {

        logger.debug("Executing runExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunExportCommandOptions commandOptions = analysisVariantCommandOptions.runExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantExportParams variantExportParams = new VariantExportParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantExportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantExportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantExportParams.class);
        }  else {
        ((VariantExportParams)variantExportParams)
            .setOutdir(commandOptions.outdir)
            .setOutputFileName(commandOptions.outputFileName)
            .setOutputFileFormat(commandOptions.outputFileFormat)
            .setVariantsFile(commandOptions.variantsFile)
            .setInclude(commandOptions.bodyInclude)
            .setExclude(commandOptions.bodyExclude)
            .setLimit(commandOptions.limit)
            .setSkip(commandOptions.skip)
            .setSavedFilter(commandOptions.savedFilter)
            .setChromosome(commandOptions.chromosome)
            .setReference(commandOptions.reference)
            .setAlternate(commandOptions.alternate)
            .setRelease(commandOptions.release)
            .setIncludeStudy(commandOptions.includeStudy)
            .setIncludeSample(commandOptions.includeSample)
            .setIncludeFile(commandOptions.includeFile)
            .setIncludeSampleData(commandOptions.includeSampleData)
            .setIncludeSampleId(commandOptions.includeSampleId)
            .setIncludeGenotype(commandOptions.includeGenotype)
            .setFile(commandOptions.file)
            .setQual(commandOptions.qual)
            .setFilter(commandOptions.filter)
            .setFileData(commandOptions.fileData)
            .setGenotype(commandOptions.genotype)
            .setSample(commandOptions.sample)
            .setSampleLimit(commandOptions.sampleLimit)
            .setSampleSkip(commandOptions.sampleSkip)
            .setSampleData(commandOptions.sampleData)
            .setSampleAnnotation(commandOptions.sampleAnnotation)
            .setFamily(commandOptions.family)
            .setFamilyMembers(commandOptions.familyMembers)
            .setFamilyDisorder(commandOptions.familyDisorder)
            .setFamilyProband(commandOptions.familyProband)
            .setFamilySegregation(commandOptions.familySegregation)
            .setCohort(commandOptions.cohort)
            .setCohortStatsPass(commandOptions.cohortStatsPass)
            .setCohortStatsMgf(commandOptions.cohortStatsMgf)
            .setMissingAlleles(commandOptions.missingAlleles)
            .setMissingGenotypes(commandOptions.missingGenotypes)
            .setScore(commandOptions.score)
            .setPolyphen(commandOptions.polyphen)
            .setSift(commandOptions.sift)
            .setGeneTraitId(commandOptions.geneTraitId)
            .setGeneTraitName(commandOptions.geneTraitName)
            .setTrait(commandOptions.trait)
            .setCosmic(commandOptions.cosmic)
            .setClinvar(commandOptions.clinvar)
            .setHpo(commandOptions.hpo)
            .setGo(commandOptions.go)
            .setExpression(commandOptions.expression)
            .setProteinKeyword(commandOptions.proteinKeyword)
            .setDrug(commandOptions.drug)
            .setCustomAnnotation(commandOptions.customAnnotation)
            .setUnknownGenotype(commandOptions.unknownGenotype);

            if (commandOptions.compress != null){
                ((VariantExportParams)variantExportParams).setCompress(commandOptions.compress);
             }

            if (commandOptions.summary != null){
                ((VariantExportParams)variantExportParams).setSummary(commandOptions.summary);
             }

            if (commandOptions.annotationExists != null){
                ((VariantExportParams)variantExportParams).setAnnotationExists(commandOptions.annotationExists);
             }

            if (commandOptions.sampleMetadata != null){
                ((VariantExportParams)variantExportParams).setSampleMetadata(commandOptions.sampleMetadata);
             }

            if (commandOptions.sort != null){
                ((VariantExportParams)variantExportParams).setSort(commandOptions.sort);
             }

        }
        return openCGAClient.getVariantClient().runExport(variantExportParams, queryParams);
    }

    private RestResponse<ObjectMap> genotypesFamily() throws Exception {

        logger.debug("Executing genotypesFamily in Analysis - Variant command line");

        AnalysisVariantCommandOptions.GenotypesFamilyCommandOptions commandOptions = analysisVariantCommandOptions.genotypesFamilyCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("clinicalAnalysis", commandOptions.clinicalAnalysis);
        queryParams.putIfNotNull("penetrance", commandOptions.penetrance);
        queryParams.putIfNotEmpty("disorder", commandOptions.disorder);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().genotypesFamily(commandOptions.modeOfInheritance, queryParams);
    }

    private RestResponse<Job> runFamilyQc() throws Exception {

        logger.debug("Executing runFamilyQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunFamilyQcCommandOptions commandOptions = analysisVariantCommandOptions.runFamilyQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        FamilyQcAnalysisParams familyQcAnalysisParams = new FamilyQcAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(familyQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            familyQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), FamilyQcAnalysisParams.class);
        }  else {
        ((FamilyQcAnalysisParams)familyQcAnalysisParams)
            .setFamily(commandOptions.family)
            .setRelatednessMethod(commandOptions.relatednessMethod)
            .setRelatednessMaf(commandOptions.relatednessMaf)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runFamilyQc(familyQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> deleteFile() throws Exception {

        logger.debug("Executing deleteFile in Analysis - Variant command line");

        AnalysisVariantCommandOptions.DeleteFileCommandOptions commandOptions = analysisVariantCommandOptions.deleteFileCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotNull("resume", commandOptions.resume);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().deleteFile(queryParams);
    }

    private RestResponse<Job> runGatk() throws Exception {

        logger.debug("Executing runGatk in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGatkCommandOptions commandOptions = analysisVariantCommandOptions.runGatkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GatkWrapperParams gatkWrapperParams = new GatkWrapperParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(gatkWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            gatkWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GatkWrapperParams.class);
        }  else {
        ((GatkWrapperParams)gatkWrapperParams)
            .setCommand(commandOptions.command)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runGatk(gatkWrapperParams, queryParams);
    }

    private RestResponse<Job> runGenomePlot() throws Exception {

        logger.debug("Executing runGenomePlot in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGenomePlotCommandOptions commandOptions = analysisVariantCommandOptions.runGenomePlotCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        GenomePlotAnalysisParams genomePlotAnalysisParams = new GenomePlotAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(genomePlotAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            genomePlotAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GenomePlotAnalysisParams.class);
        }  else {
        ((GenomePlotAnalysisParams)genomePlotAnalysisParams)
            .setSample(commandOptions.sample)
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setConfigFile(commandOptions.configFile)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runGenomePlot(genomePlotAnalysisParams, queryParams);
    }

    private RestResponse<Job> runGwas() throws Exception {

        logger.debug("Executing runGwas in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunGwasCommandOptions commandOptions = analysisVariantCommandOptions.runGwasCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        GwasConfiguration.Method methodParam = null;
        if (commandOptions.method != null) {
         methodParam = GwasConfiguration.Method.valueOf(commandOptions.method);

        } 
        GwasConfiguration.FisherMode fisherModeParam = null;
        if (commandOptions.fisherMode != null) {
         fisherModeParam = GwasConfiguration.FisherMode.valueOf(commandOptions.fisherMode);

        } 

        GwasAnalysisParams gwasAnalysisParams = new GwasAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(gwasAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            gwasAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), GwasAnalysisParams.class);
        }  else {
        ((GwasAnalysisParams)gwasAnalysisParams)
            .setPhenotype(commandOptions.phenotype)
            .setIndexScoreId(commandOptions.indexScoreId)
            .setCaseCohort(commandOptions.caseCohort)
            .setCaseCohortSamplesAnnotation(commandOptions.caseCohortSamplesAnnotation)
            .setCaseCohortSamples(splitWithTrim(commandOptions.caseCohortSamples))
            .setControlCohort(commandOptions.controlCohort)
            .setControlCohortSamplesAnnotation(commandOptions.controlCohortSamplesAnnotation)
            .setControlCohortSamples(splitWithTrim(commandOptions.controlCohortSamples))
            .setOutdir(commandOptions.outdir);

            if (commandOptions.index != null){
                ((GwasAnalysisParams)gwasAnalysisParams).setIndex(commandOptions.index);
             }

        }
        return openCGAClient.getVariantClient().runGwas(gwasAnalysisParams, queryParams);
    }

    private RestResponse<Job> runIndex() throws Exception {

        logger.debug("Executing runIndex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndexCommandOptions commandOptions = analysisVariantCommandOptions.runIndexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantIndexParams variantIndexParams = new VariantIndexParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantIndexParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantIndexParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantIndexParams.class);
        }  else {
        ((VariantIndexParams)variantIndexParams)
            .setFile(commandOptions.file)
            .setOutdir(commandOptions.outdir)
            .setReferenceGenome(commandOptions.referenceGenome)
            .setFailOnMalformedLines(commandOptions.failOnMalformedLines)
            .setLoadSplitData(commandOptions.loadSplitData)
            .setLoadSampleIndex(commandOptions.loadSampleIndex)
            .setLoadArchive(commandOptions.loadArchive)
            .setLoadHomRef(commandOptions.loadHomRef)
            .setPostLoadCheck(commandOptions.postLoadCheck)
            .setIncludeGenotypes(commandOptions.includeGenotypes)
            .setIncludeSampleData(commandOptions.includeSampleData)
            .setMerge(commandOptions.merge)
            .setDeduplicationPolicy(commandOptions.deduplicationPolicy)
            .setAggregationMappingFile(commandOptions.aggregationMappingFile)
            .setAnnotator(commandOptions.annotator);

            if (commandOptions.resume != null){
                ((VariantIndexParams)variantIndexParams).setResume(commandOptions.resume);
             }

            if (commandOptions.transform != null){
                ((VariantIndexParams)variantIndexParams).setTransform(commandOptions.transform);
             }

            if (commandOptions.gvcf != null){
                ((VariantIndexParams)variantIndexParams).setGvcf(commandOptions.gvcf);
             }

            if (commandOptions.normalizationSkip != null){
                ((VariantIndexParams)variantIndexParams).setNormalizationSkip(commandOptions.normalizationSkip);
             }

            if (commandOptions.family != null){
                ((VariantIndexParams)variantIndexParams).setFamily(commandOptions.family);
             }

            if (commandOptions.somatic != null){
                ((VariantIndexParams)variantIndexParams).setSomatic(commandOptions.somatic);
             }

            if (commandOptions.load != null){
                ((VariantIndexParams)variantIndexParams).setLoad(commandOptions.load);
             }

            if (commandOptions.loadMultiFileData != null){
                ((VariantIndexParams)variantIndexParams).setLoadMultiFileData(commandOptions.loadMultiFileData);
             }

            if (commandOptions.calculateStats != null){
                ((VariantIndexParams)variantIndexParams).setCalculateStats(commandOptions.calculateStats);
             }

            if (commandOptions.annotate != null){
                ((VariantIndexParams)variantIndexParams).setAnnotate(commandOptions.annotate);
             }

            if (commandOptions.overwriteAnnotations != null){
                ((VariantIndexParams)variantIndexParams).setOverwriteAnnotations(commandOptions.overwriteAnnotations);
             }

            if (commandOptions.indexSearch != null){
                ((VariantIndexParams)variantIndexParams).setIndexSearch(commandOptions.indexSearch);
             }

            if (commandOptions.skipIndexedFiles != null){
                ((VariantIndexParams)variantIndexParams).setSkipIndexedFiles(commandOptions.skipIndexedFiles);
             }

        }
        return openCGAClient.getVariantClient().runIndex(variantIndexParams, queryParams);
    }

    private RestResponse<Job> runIndividualQc() throws Exception {

        logger.debug("Executing runIndividualQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunIndividualQcCommandOptions commandOptions = analysisVariantCommandOptions.runIndividualQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        IndividualQcAnalysisParams individualQcAnalysisParams = new IndividualQcAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(individualQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            individualQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), IndividualQcAnalysisParams.class);
        }  else {
        ((IndividualQcAnalysisParams)individualQcAnalysisParams)
            .setIndividual(commandOptions.individual)
            .setSample(commandOptions.sample)
            .setInferredSexMethod(commandOptions.inferredSexMethod)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runIndividualQc(individualQcAnalysisParams, queryParams);
    }

    private RestResponse<Job> runInferredSex() throws Exception {

        logger.debug("Executing runInferredSex in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunInferredSexCommandOptions commandOptions = analysisVariantCommandOptions.runInferredSexCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        InferredSexAnalysisParams inferredSexAnalysisParams = new InferredSexAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(inferredSexAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            inferredSexAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), InferredSexAnalysisParams.class);
        }  else {
        ((InferredSexAnalysisParams)inferredSexAnalysisParams)
            .setIndividual(commandOptions.individual)
            .setSample(commandOptions.sample)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runInferredSex(inferredSexAnalysisParams, queryParams);
    }

    private RestResponse<KnockoutByGene> queryKnockoutGene() throws Exception {

        logger.debug("Executing queryKnockoutGene in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutGeneCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutGeneCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutGene(queryParams);
    }

    private RestResponse<KnockoutByIndividual> queryKnockoutIndividual() throws Exception {

        logger.debug("Executing queryKnockoutIndividual in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryKnockoutIndividualCommandOptions commandOptions = analysisVariantCommandOptions.queryKnockoutIndividualCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("job", commandOptions.job);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryKnockoutIndividual(queryParams);
    }

    private RestResponse<Job> runKnockout() throws Exception {

        logger.debug("Executing runKnockout in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunKnockoutCommandOptions commandOptions = analysisVariantCommandOptions.runKnockoutCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        KnockoutAnalysisParams knockoutAnalysisParams = new KnockoutAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(knockoutAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            knockoutAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), KnockoutAnalysisParams.class);
        }  else {
        ((KnockoutAnalysisParams)knockoutAnalysisParams)
            .setSample(splitWithTrim(commandOptions.sample))
            .setGene(splitWithTrim(commandOptions.gene))
            .setPanel(splitWithTrim(commandOptions.panel))
            .setBiotype(commandOptions.biotype)
            .setConsequenceType(commandOptions.consequenceType)
            .setFilter(commandOptions.filter)
            .setQual(commandOptions.qual)
            .setOutdir(commandOptions.outdir);

            if (commandOptions.skipGenesFile != null){
                ((KnockoutAnalysisParams)knockoutAnalysisParams).setSkipGenesFile(commandOptions.skipGenesFile);
             }

            if (commandOptions.index != null){
                ((KnockoutAnalysisParams)knockoutAnalysisParams).setIndex(commandOptions.index);
             }

        }
        return openCGAClient.getVariantClient().runKnockout(knockoutAnalysisParams, queryParams);
    }

    private RestResponse<Job> runMendelianError() throws Exception {

        logger.debug("Executing runMendelianError in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMendelianErrorCommandOptions commandOptions = analysisVariantCommandOptions.runMendelianErrorCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        MendelianErrorAnalysisParams mendelianErrorAnalysisParams = new MendelianErrorAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(mendelianErrorAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            mendelianErrorAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), MendelianErrorAnalysisParams.class);
        }  else {
        ((MendelianErrorAnalysisParams)mendelianErrorAnalysisParams)
            .setFamily(commandOptions.family)
            .setIndividual(commandOptions.individual)
            .setSample(commandOptions.sample)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runMendelianError(mendelianErrorAnalysisParams, queryParams);
    }

    private RestResponse<VariantMetadata> metadata() throws Exception {

        logger.debug("Executing metadata in Analysis - Variant command line");

        AnalysisVariantCommandOptions.MetadataCommandOptions commandOptions = analysisVariantCommandOptions.metadataCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().metadata(queryParams);
    }

    private RestResponse<Signature> queryMutationalSignature() throws Exception {

        logger.debug("Executing queryMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.queryMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotNull("fitting", commandOptions.fitting);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().queryMutationalSignature(queryParams);
    }

    private RestResponse<Job> runMutationalSignature() throws Exception {

        logger.debug("Executing runMutationalSignature in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunMutationalSignatureCommandOptions commandOptions = analysisVariantCommandOptions.runMutationalSignatureCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        MutationalSignatureAnalysisParams mutationalSignatureAnalysisParams = new MutationalSignatureAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(mutationalSignatureAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            mutationalSignatureAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), MutationalSignatureAnalysisParams.class);
        }  else {
        ((MutationalSignatureAnalysisParams)mutationalSignatureAnalysisParams)
            .setSample(commandOptions.sample)
            .setId(commandOptions.id)
            .setDescription(commandOptions.description)
            .setRelease(commandOptions.release)
            .setOutdir(commandOptions.outdir);

            if (commandOptions.fitting != null){
                ((MutationalSignatureAnalysisParams)mutationalSignatureAnalysisParams).setFitting(commandOptions.fitting);
             }

        }
        return openCGAClient.getVariantClient().runMutationalSignature(mutationalSignatureAnalysisParams, queryParams);
    }

    private RestResponse<Job> runPlink() throws Exception {

        logger.debug("Executing runPlink in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunPlinkCommandOptions commandOptions = analysisVariantCommandOptions.runPlinkCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        PlinkWrapperParams plinkWrapperParams = new PlinkWrapperParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(plinkWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            plinkWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), PlinkWrapperParams.class);
        }  else {
        ((PlinkWrapperParams)plinkWrapperParams)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runPlink(plinkWrapperParams, queryParams);
    }

    private RestResponse<Variant> query() throws Exception {

        logger.debug("Executing query in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QueryCommandOptions commandOptions = analysisVariantCommandOptions.queryCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("include", commandOptions.include);
        queryParams.putIfNotEmpty("exclude", commandOptions.exclude);
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotNull("count", commandOptions.count);
        queryParams.putIfNotNull("sort", commandOptions.sort);
        queryParams.putIfNotNull("summary", commandOptions.summary);
        queryParams.putIfNotNull("approximateCount", commandOptions.approximateCount);
        queryParams.putIfNotNull("approximateCountSamplingSize", commandOptions.approximateCountSamplingSize);
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("id", commandOptions.id);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("reference", commandOptions.reference);
        queryParams.putIfNotEmpty("alternate", commandOptions.alternate);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("qual", commandOptions.qual);
        queryParams.putIfNotEmpty("fileData", commandOptions.fileData);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotNull("sampleMetadata", commandOptions.sampleMetadata);
        queryParams.putIfNotEmpty("unknownGenotype", commandOptions.unknownGenotype);
        queryParams.putIfNotNull("sampleLimit", commandOptions.sampleLimit);
        queryParams.putIfNotNull("sampleSkip", commandOptions.sampleSkip);
        queryParams.putIfNotEmpty("cohort", commandOptions.cohort);
        queryParams.putIfNotEmpty("cohortStatsRef", commandOptions.cohortStatsRef);
        queryParams.putIfNotEmpty("cohortStatsAlt", commandOptions.cohortStatsAlt);
        queryParams.putIfNotEmpty("cohortStatsMaf", commandOptions.cohortStatsMaf);
        queryParams.putIfNotEmpty("cohortStatsMgf", commandOptions.cohortStatsMgf);
        queryParams.putIfNotEmpty("cohortStatsPass", commandOptions.cohortStatsPass);
        queryParams.putIfNotEmpty("missingAlleles", commandOptions.missingAlleles);
        queryParams.putIfNotEmpty("missingGenotypes", commandOptions.missingGenotypes);
        queryParams.putIfNotEmpty("score", commandOptions.score);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("includeStudy", commandOptions.includeStudy);
        queryParams.putIfNotEmpty("includeFile", commandOptions.includeFile);
        queryParams.putIfNotEmpty("includeSample", commandOptions.includeSample);
        queryParams.putIfNotEmpty("includeSampleData", commandOptions.includeSampleData);
        queryParams.putIfNotEmpty("includeGenotype", commandOptions.includeGenotype);
        queryParams.putIfNotEmpty("includeSampleId", commandOptions.includeSampleId);
        queryParams.putIfNotNull("annotationExists", commandOptions.annotationExists);
        queryParams.putIfNotEmpty("gene", commandOptions.gene);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("xref", commandOptions.xref);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("proteinSubstitution", commandOptions.proteinSubstitution);
        queryParams.putIfNotEmpty("conservation", commandOptions.conservation);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("populationFrequencyRef", commandOptions.populationFrequencyRef);
        queryParams.putIfNotEmpty("populationFrequencyMaf", commandOptions.populationFrequencyMaf);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("geneTraitId", commandOptions.geneTraitId);
        queryParams.putIfNotEmpty("go", commandOptions.go);
        queryParams.putIfNotEmpty("expression", commandOptions.expression);
        queryParams.putIfNotEmpty("proteinKeyword", commandOptions.proteinKeyword);
        queryParams.putIfNotEmpty("drug", commandOptions.drug);
        queryParams.putIfNotEmpty("functionalScore", commandOptions.functionalScore);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("customAnnotation", commandOptions.customAnnotation);
        queryParams.putIfNotEmpty("panel", commandOptions.panel);
        queryParams.putIfNotEmpty("panelModeOfInheritance", commandOptions.panelModeOfInheritance);
        queryParams.putIfNotEmpty("panelConfidence", commandOptions.panelConfidence);
        queryParams.putIfNotEmpty("panelRoleInCancer", commandOptions.panelRoleInCancer);
        queryParams.putIfNotEmpty("panelFeatureType", commandOptions.panelFeatureType);
        queryParams.putIfNotNull("panelIntersection", commandOptions.panelIntersection);
        queryParams.putIfNotEmpty("trait", commandOptions.trait);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().query(queryParams);
    }

    private RestResponse<Job> runRelatedness() throws Exception {

        logger.debug("Executing runRelatedness in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRelatednessCommandOptions commandOptions = analysisVariantCommandOptions.runRelatednessCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RelatednessAnalysisParams relatednessAnalysisParams = new RelatednessAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(relatednessAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            relatednessAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RelatednessAnalysisParams.class);
        }  else {
        ((RelatednessAnalysisParams)relatednessAnalysisParams)
            .setIndividuals(splitWithTrim(commandOptions.individuals))
            .setSamples(splitWithTrim(commandOptions.samples))
            .setMinorAlleleFreq(commandOptions.minorAlleleFreq)
            .setMethod(commandOptions.method)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runRelatedness(relatednessAnalysisParams, queryParams);
    }

    private RestResponse<Job> runRvtests() throws Exception {

        logger.debug("Executing runRvtests in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunRvtestsCommandOptions commandOptions = analysisVariantCommandOptions.runRvtestsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        RvtestsWrapperParams rvtestsWrapperParams = new RvtestsWrapperParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(rvtestsWrapperParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            rvtestsWrapperParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), RvtestsWrapperParams.class);
        }  else {
        ((RvtestsWrapperParams)rvtestsWrapperParams)
            .setCommand(commandOptions.command)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runRvtests(rvtestsWrapperParams, queryParams);
    }

    private RestResponse<FacetField> aggregationStatsSample() throws Exception {

        logger.debug("Executing aggregationStatsSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.AggregationStatsSampleCommandOptions commandOptions = analysisVariantCommandOptions.aggregationStatsSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("savedFilter", commandOptions.savedFilter);
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sample", commandOptions.sample);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        queryParams.putIfNotEmpty("sampleAnnotation", commandOptions.sampleAnnotation);
        queryParams.putIfNotEmpty("family", commandOptions.family);
        queryParams.putIfNotEmpty("familyDisorder", commandOptions.familyDisorder);
        queryParams.putIfNotEmpty("familySegregation", commandOptions.familySegregation);
        queryParams.putIfNotEmpty("familyMembers", commandOptions.familyMembers);
        queryParams.putIfNotEmpty("familyProband", commandOptions.familyProband);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("field", commandOptions.field);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().aggregationStatsSample(queryParams);
    }

    private RestResponse<Job> runSampleEligibility() throws Exception {

        logger.debug("Executing runSampleEligibility in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleEligibilityCommandOptions commandOptions = analysisVariantCommandOptions.runSampleEligibilityCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleEligibilityAnalysisParams sampleEligibilityAnalysisParams = new SampleEligibilityAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleEligibilityAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleEligibilityAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleEligibilityAnalysisParams.class);
        }  else {
        ((SampleEligibilityAnalysisParams)sampleEligibilityAnalysisParams)
            .setQuery(commandOptions.query)
            .setCohortId(commandOptions.cohortId);

            if (commandOptions.index != null){
                ((SampleEligibilityAnalysisParams)sampleEligibilityAnalysisParams).setIndex(commandOptions.index);
             }

        }
        return openCGAClient.getVariantClient().runSampleEligibility(sampleEligibilityAnalysisParams, queryParams);
    }

    private RestResponse<Job> runSampleQc() throws Exception {

        logger.debug("Executing runSampleQc in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleQcCommandOptions commandOptions = analysisVariantCommandOptions.runSampleQcCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        AnnotationVariantQueryParams annotationVariantQueryParams= new AnnotationVariantQueryParams();
        invokeSetter(annotationVariantQueryParams, "id", commandOptions.variantStatsQueryId);
        invokeSetter(annotationVariantQueryParams, "region", commandOptions.variantStatsQueryRegion);
        invokeSetter(annotationVariantQueryParams, "gene", commandOptions.variantStatsQueryGene);
        invokeSetter(annotationVariantQueryParams, "type", commandOptions.variantStatsQueryType);
        invokeSetter(annotationVariantQueryParams, "panel", commandOptions.variantStatsQueryPanel);
        invokeSetter(annotationVariantQueryParams, "panelModeOfInheritance", commandOptions.variantStatsQueryPanelModeOfInheritance);
        invokeSetter(annotationVariantQueryParams, "panelConfidence", commandOptions.variantStatsQueryPanelConfidence);
        invokeSetter(annotationVariantQueryParams, "panelRoleInCancer", commandOptions.variantStatsQueryPanelRoleInCancer);
        invokeSetter(annotationVariantQueryParams, "panelIntersection", commandOptions.variantStatsQueryPanelIntersection);
        invokeSetter(annotationVariantQueryParams, "cohortStatsRef", commandOptions.variantStatsQueryCohortStatsRef);
        invokeSetter(annotationVariantQueryParams, "cohortStatsAlt", commandOptions.variantStatsQueryCohortStatsAlt);
        invokeSetter(annotationVariantQueryParams, "cohortStatsMaf", commandOptions.variantStatsQueryCohortStatsMaf);
        invokeSetter(annotationVariantQueryParams, "ct", commandOptions.variantStatsQueryCt);
        invokeSetter(annotationVariantQueryParams, "xref", commandOptions.variantStatsQueryXref);
        invokeSetter(annotationVariantQueryParams, "biotype", commandOptions.variantStatsQueryBiotype);
        invokeSetter(annotationVariantQueryParams, "proteinSubstitution", commandOptions.variantStatsQueryProteinSubstitution);
        invokeSetter(annotationVariantQueryParams, "conservation", commandOptions.variantStatsQueryConservation);
        invokeSetter(annotationVariantQueryParams, "populationFrequencyMaf", commandOptions.variantStatsQueryPopulationFrequencyMaf);
        invokeSetter(annotationVariantQueryParams, "populationFrequencyAlt", commandOptions.variantStatsQueryPopulationFrequencyAlt);
        invokeSetter(annotationVariantQueryParams, "populationFrequencyRef", commandOptions.variantStatsQueryPopulationFrequencyRef);
        invokeSetter(annotationVariantQueryParams, "transcriptFlag", commandOptions.variantStatsQueryTranscriptFlag);
        invokeSetter(annotationVariantQueryParams, "functionalScore", commandOptions.variantStatsQueryFunctionalScore);
        invokeSetter(annotationVariantQueryParams, "clinical", commandOptions.variantStatsQueryClinical);
        invokeSetter(annotationVariantQueryParams, "clinicalSignificance", commandOptions.variantStatsQueryClinicalSignificance);
        invokeSetter(annotationVariantQueryParams, "clinicalConfirmedStatus", commandOptions.variantStatsQueryClinicalConfirmedStatus);

        SampleQcAnalysisParams sampleQcAnalysisParams = new SampleQcAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleQcAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleQcAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleQcAnalysisParams.class);
        }  else {
        ((SampleQcAnalysisParams)sampleQcAnalysisParams)
            .setSample(commandOptions.sample)
            .setVariantStatsId(commandOptions.variantStatsId)
            .setVariantStatsDescription(commandOptions.variantStatsDescription)
            .setVariantStatsQuery(annotationVariantQueryParams)
            .setSignatureId(commandOptions.signatureId)
            .setSignatureDescription(commandOptions.signatureDescription)
            .setSignatureRelease(commandOptions.signatureRelease)
            .setGenomePlotId(commandOptions.genomePlotId)
            .setGenomePlotDescription(commandOptions.genomePlotDescription)
            .setGenomePlotConfigFile(commandOptions.genomePlotConfigFile)
            .setOutdir(commandOptions.outdir);

        }
        return openCGAClient.getVariantClient().runSampleQc(sampleQcAnalysisParams, queryParams);
    }

    private RestResponse<Variant> querySample() throws Exception {

        logger.debug("Executing querySample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleCommandOptions commandOptions = analysisVariantCommandOptions.querySampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotNull("limit", commandOptions.limit);
        queryParams.putIfNotNull("skip", commandOptions.skip);
        queryParams.putIfNotEmpty("variant", commandOptions.variant);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("genotype", commandOptions.genotype);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySample(queryParams);
    }

    private RestResponse<Job> runSample() throws Exception {

        logger.debug("Executing runSample in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleCommandOptions commandOptions = analysisVariantCommandOptions.runSampleCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleVariantFilterParams sampleVariantFilterParams = new SampleVariantFilterParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleVariantFilterParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleVariantFilterParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleVariantFilterParams.class);
        }  else {
        ((SampleVariantFilterParams)sampleVariantFilterParams)
            .setGenotypes(splitWithTrim(commandOptions.genotypes))
            .setSample(splitWithTrim(commandOptions.sample))
            .setMaxVariants(commandOptions.maxVariants)
            .setId(commandOptions.id)
            .setRegion(commandOptions.region)
            .setGene(commandOptions.gene)
            .setType(commandOptions.type)
            .setPanel(commandOptions.panel)
            .setPanelModeOfInheritance(commandOptions.panelModeOfInheritance)
            .setPanelConfidence(commandOptions.panelConfidence)
            .setPanelRoleInCancer(commandOptions.panelRoleInCancer)
            .setCohortStatsRef(commandOptions.cohortStatsRef)
            .setCohortStatsAlt(commandOptions.cohortStatsAlt)
            .setCohortStatsMaf(commandOptions.cohortStatsMaf)
            .setCt(commandOptions.ct)
            .setXref(commandOptions.xref)
            .setBiotype(commandOptions.biotype)
            .setProteinSubstitution(commandOptions.proteinSubstitution)
            .setConservation(commandOptions.conservation)
            .setPopulationFrequencyMaf(commandOptions.populationFrequencyMaf)
            .setPopulationFrequencyAlt(commandOptions.populationFrequencyAlt)
            .setPopulationFrequencyRef(commandOptions.populationFrequencyRef)
            .setTranscriptFlag(commandOptions.transcriptFlag)
            .setFunctionalScore(commandOptions.functionalScore)
            .setClinical(commandOptions.clinical)
            .setClinicalSignificance(commandOptions.clinicalSignificance)
            .setClinicalConfirmedStatus(commandOptions.clinicalConfirmedStatus);

            if (commandOptions.samplesInAllVariants != null){
                ((SampleVariantFilterParams)sampleVariantFilterParams).setSamplesInAllVariants(commandOptions.samplesInAllVariants);
             }

            if (commandOptions.panelIntersection != null){
                ((SampleVariantFilterParams)sampleVariantFilterParams).setPanelIntersection(commandOptions.panelIntersection);
             }

        }
        return openCGAClient.getVariantClient().runSample(sampleVariantFilterParams, queryParams);
    }

    private RestResponse<SampleVariantStats> querySampleStats() throws Exception {

        logger.debug("Executing querySampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.QuerySampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.querySampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("region", commandOptions.region);
        queryParams.putIfNotEmpty("type", commandOptions.type);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("file", commandOptions.file);
        queryParams.putIfNotEmpty("filter", commandOptions.filter);
        queryParams.putIfNotEmpty("sampleData", commandOptions.sampleData);
        queryParams.putIfNotEmpty("ct", commandOptions.ct);
        queryParams.putIfNotEmpty("biotype", commandOptions.biotype);
        queryParams.putIfNotEmpty("transcriptFlag", commandOptions.transcriptFlag);
        queryParams.putIfNotEmpty("populationFrequencyAlt", commandOptions.populationFrequencyAlt);
        queryParams.putIfNotEmpty("clinical", commandOptions.clinical);
        queryParams.putIfNotEmpty("clinicalSignificance", commandOptions.clinicalSignificance);
        queryParams.putIfNotNull("clinicalConfirmedStatus", commandOptions.clinicalConfirmedStatus);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotNull("filterTranscript", commandOptions.filterTranscript);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }

        return openCGAClient.getVariantClient().querySampleStats(commandOptions.sample, queryParams);
    }

    private RestResponse<Job> runSampleStats() throws Exception {

        logger.debug("Executing runSampleStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunSampleStatsCommandOptions commandOptions = analysisVariantCommandOptions.runSampleStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        SampleVariantStatsAnalysisParams sampleVariantStatsAnalysisParams = new SampleVariantStatsAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(sampleVariantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            sampleVariantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), SampleVariantStatsAnalysisParams.class);
        }  else {
        ((SampleVariantStatsAnalysisParams)sampleVariantStatsAnalysisParams)
            .setSample(splitWithTrim(commandOptions.sample))
            .setIndividual(splitWithTrim(commandOptions.individual))
            .setOutdir(commandOptions.outdir)
            .setIndexId(commandOptions.indexId)
            .setIndexDescription(commandOptions.indexDescription)
            .setBatchSize(commandOptions.batchSize);

            if (commandOptions.index != null){
                ((SampleVariantStatsAnalysisParams)sampleVariantStatsAnalysisParams).setIndex(commandOptions.index);
             }

            if (commandOptions.indexOverwrite != null){
                ((SampleVariantStatsAnalysisParams)sampleVariantStatsAnalysisParams).setIndexOverwrite(commandOptions.indexOverwrite);
             }

        }
        return openCGAClient.getVariantClient().runSampleStats(sampleVariantStatsAnalysisParams, queryParams);
    }

    private RestResponse<Job> runStatsExport() throws Exception {

        logger.debug("Executing runStatsExport in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsExportCommandOptions commandOptions = analysisVariantCommandOptions.runStatsExportCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("project", commandOptions.project);
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsExportParams variantStatsExportParams = new VariantStatsExportParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsExportParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsExportParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsExportParams.class);
        }  else {
        ((VariantStatsExportParams)variantStatsExportParams)
            .setCohorts(splitWithTrim(commandOptions.cohorts))
            .setOutput(commandOptions.output)
            .setRegion(commandOptions.region)
            .setGene(commandOptions.gene)
            .setOutputFileFormat(commandOptions.outputFileFormat);

        }
        return openCGAClient.getVariantClient().runStatsExport(variantStatsExportParams, queryParams);
    }

    private RestResponse<Job> runStats() throws Exception {

        logger.debug("Executing runStats in Analysis - Variant command line");

        AnalysisVariantCommandOptions.RunStatsCommandOptions commandOptions = analysisVariantCommandOptions.runStatsCommandOptions;

        ObjectMap queryParams = new ObjectMap();
        queryParams.putIfNotEmpty("study", commandOptions.study);
        queryParams.putIfNotEmpty("jobId", commandOptions.jobId);
        queryParams.putIfNotEmpty("jobDescription", commandOptions.jobDescription);
        queryParams.putIfNotEmpty("jobDependsOn", commandOptions.jobDependsOn);
        queryParams.putIfNotEmpty("jobTags", commandOptions.jobTags);
        if (queryParams.get("study") == null && OpencgaMain.isShellMode()) {
            queryParams.putIfNotEmpty("study", sessionManager.getSession().getCurrentStudy());
        }


        VariantStatsAnalysisParams variantStatsAnalysisParams = new VariantStatsAnalysisParams();
        if (commandOptions.jsonDataModel) {
            RestResponse<Job> res = new RestResponse<>();
            res.setType(QueryType.VOID);
            PrintUtils.println(getObjectAsJSON(variantStatsAnalysisParams));
            return res;
        } else if (commandOptions.jsonFile != null) {
            variantStatsAnalysisParams = JacksonUtils.getDefaultObjectMapper()
                    .readValue(new java.io.File(commandOptions.jsonFile), VariantStatsAnalysisParams.class);
        }  else {
        ((VariantStatsAnalysisParams)variantStatsAnalysisParams)
            .setCohort(splitWithTrim(commandOptions.cohort))
            .setSamples(splitWithTrim(commandOptions.samples))
            .setRegion(commandOptions.region)
            .setGene(commandOptions.gene)
            .setOutdir(commandOptions.outdir)
            .setOutputFileName(commandOptions.outputFileName)
            .setAggregationMappingFile(commandOptions.aggregationMappingFile);

        }
        return openCGAClient.getVariantClient().runStats(variantStatsAnalysisParams, queryParams);
    }
}